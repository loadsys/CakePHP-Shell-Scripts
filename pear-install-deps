#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}  
    Provides a shortcut syntax to discover multiple PEAR channels
    and install PEAR packages from them. Provide space-separated
    package names, optionally prefixed with their PEAR channel. If
    a channel is not provided, it is assumed it is already
    installed. For example:

    bin/pear-install-deps PHP_CodeSniffer pear.phpunit.de:phpunit/PHPUnit

    If no packages are supplied on the command line, a default
    config file is used that lists packages one per line. If that
    file is also not present or readable, the script exits with
    a non-zero status.

    Will exit non-zero if \`pear\` is not found in \$PATH.

Usage:
    bin/${0##*/} [[channel1:]package1 ...]


EOT

	exit 0
}
if [ "$1" = '-h' ]; then
	usage
fi

PEAR_OPTIONS="--alldeps"
PEAR_PACKAGES_FILE="$DIR/Config/pear_packages.txt"

# Bail out if PEAR isn't available to us, or no arguments were provided.
PEAR="$( which pear )"
if [ $? -gt 0 ]; then
	echo "!! The 'pear' command was not found on this system."
	echo ""
	exit 1
fi
if [ -z "$1" ]; then
	usage
	#@TODO: Check for $PEAR_PACKAGES_FILE. If present, populate $@ from it. Otherwise `exit 1`.
fi

## Define accumulators for channel list and package list.
CHANNELS=()
PACKAGES=()

## Compile channels and packages into their own lists.
for ARG in "$@"; do
	IFS=":" read -a PAIR <<< "$ARG"
	if [ "${PAIR[1]+isset}" ]; then
		CHANNELS+=(${PAIR[0]})
		PACKAGES+=(${PAIR[1]})
	else
		PACKAGES+=(${PAIR[0]})
	fi
done

# Remove duplicates from each list.
CHANNELS=($(printf "%s\n" "${CHANNELS[@]}" | sort -u))
PACKAGES=($(printf "%s\n" "${PACKAGES[@]}" | sort -u))

# Discover all channels, if any, then update them.
if [ "${#CHANNELS[@]}" -gt 0 ]; then
	echo "## ${#CHANNELS[@]} channels to discover: ${CHANNELS[@]}"
	for CHANNEL in "${CHANNELS[@]}"; do
		echo "## Discovering '$CHANNEL'"
		"$PEAR" channel-discover $CHANNEL
	done

	echo "## Updating channels."
	"$PEAR" update-channels
fi

# Install all packages. If any of these fail, the whole script has "failed".
if [ "${#PACKAGES[@]}" -gt 0 ]; then
	echo "## ${#PACKAGES[@]} packages to install: ${PACKAGES[@]}"
	for PACKAGE in "${PACKAGES[@]}"; do
		if ./pear-package-installed-dumb "$PACKAGE" "$CHANNEL"; then
			echo "## Package '$PACKAGE' seems to already be installed. Skipping."
			continue
		else
			echo "## Installing '$PACKAGE'"
			"$PEAR" install $PEAR_OPTIONS "$PACKAGE"
		fi
	done
fi
echo "## PEAR installations complete."
