#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}
	A provisioning script for initializing a bare-metal server. This runs
	from the the new machine, expects to have shell and sudo access, and
	handles initial setup before handing off to \`bootstrap.sh\`. Installs
	git, clones the specified repo and starts provisioning using the
	specified APP_ENV value.

Usage:
	From the machine to be provisioned:

	curl https://raw.githubusercontent.com/loadsys/CakePHP-Shell-Scripts/master/${0##*/} | bash -s -- <REPO_CLONE_URL> <GIT_BRANCH> <APP_ENV_VALUE>

	Should be run as the user the app will run as on the target server.

EOT

	exit ${1:-0}  # Exit with code 0 unless an arg is passed to the method.
}
if [ "$1" = '-h' ]; then
	usage
fi


# Set up working vars.
REPO_CLONE_URL=${1}
GIT_BRANCH=${2}
APP_ENV=${3}
INSTALL_DIR="/var/www"
BOOTSTRAP_SCRIPT="./bootstrap.sh"


# Validate input and environment.
if [ -z "$REPO_CLONE_URL" ] ; then
	echo "!! Must provide git repo URL as first arg (https recommended over git/ssh)."
	exit 1
fi

if [ -z "$GIT_BRANCH" ] ; then
	echo "!! Must provide desired git branch as second arg."
	exit 2
fi

if [ -z "$APP_ENV" ] ; then
	echo "!! Must provide desired APP_ENV as third arg."
	exit 3
fi

if [ -d "${INSTALL_DIR}" ] && [ -n $(find "${INSTALL_DIR}" -maxdepth 0 -type d -empty 2>/dev/null) ]; then
	echo "!! Installation directory is not empty. Aborting."
	exit 4
fi


# main()
echo "## Installing git."
sudo apt-get -y update
sudo apt-get -y install git-core build-essential

echo "## Cloning repo."
git clone -b $GIT_BRANCH $REPO_CLONE_URL repo

echo "## Moving repo into place."
sudo mv repo "${INSTALL_DIR}"

cd "${INSTALL_DIR}"

if [ ! -x "${BOOTSTRAP_SCRIPT}" ] ; then
	echo "!! Bootstrap script is not present. Exiting."
	exit 5
fi

echo "## Executing bootstrap script."
"${BOOTSTRAP_SCRIPT}" $APP_ENV
