#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}
    Convenience wrapper around code sniffing tool. If \$1 is provided, a
    summary and full reports will be generated, rather than being output
    to the standard output.

Usage:
    bin/${0##*/} [save reports?]

    Specify 'y' as the first argument to save reports in the tmp directory,
    else full and summary reports are generated but not saved to a file.


EOT

	exit 0
}
if [ "$1" = '-h' ]; then
	usage
fi

umask a+rw

DIR="$( cd -P "$( dirname "$0" )"/.. >/dev/null 2>&1 && pwd )"
BIN_DIR="${DIR}/bin"
TMP_DIR="${DIR}/tmp"
REPORT_DIR="${TMP_DIR}/code-sniffs"
FULL_REPORT_FILE="${REPORT_DIR}/report-full.txt"
SUMMARY_REPORT_FILE="${REPORT_DIR}/report-summary.txt"

CODE_STANDARD="Vendor/loadsys/loadsys_codesniffer/Loadsys"
SNIFF_FOLDERS=("${DIR}/Controller" "${DIR}/Model" "${DIR}/View" "${DIR}/Lib" "${DIR}/Console/Command")
SNIFF_FAIL_CAUSES_SCRIPT_FAIL=1 # 1 = false. This script will therefore always exit 0.

# Bail out if phpcs isn't available to us.
PHPCS="$( which phpcs )"
if [ $? -gt 0 ]; then
	PHPCS="$BIN_DIR/phpcs"
	test -x $PHPCS
fi
if [ $? -gt 0 ]; then
	echo "!! The 'phpcs' command was not found on this system."
	echo ""
	exit 1
fi
echo "## Found phpcs at: ${PHPCS}"

if [ -z "$1" ]; then
	echo "## Printing reports..."
	SAVE_REPORTS=1  # 1 = false. DON'T save reports when no args provided.
	COVERAGE="--report-full --report-summary"
else
	echo "## Saving reports..."
	SAVE_REPORTS=0  # 0 = true. Save reports to files, not print to screen.
	COVERAGE="--report-full=${FULL_REPORT_FILE} --report-summary=${SUMMARY_REPORT_FILE}"
	mkdir -p "$REPORT_DIR"
fi

"$PHPCS" -p --extensions=php --standard="$CODE_STANDARD" ${COVERAGE} ${SNIFF_FOLDERS[@]}
SNIFF_RESULT=$?

if [ $SAVE_REPORTS -eq 0 ]; then
	echo "## Full report created at: ${FULL_REPORT_FILE}"
	echo "## Summary report created at: ${SUMMARY_REPORT_FILE}"
fi

# Exit based on whether sniff fails should count as a "failure".
if [ $SNIFF_FAIL_CAUSES_SCRIPT_FAIL -eq 0 ]; then
	exit $SNIFF_RESULT
else
	exit 0
fi