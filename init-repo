#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}  
    Sets up a freshly-cloned copy of a project for local use. The script 
    is designed to be portable, without modification, between projects 
    that may or may not implement various features (like migrations or 
    the seedshell) and call those components only if they are found to 
    be available. It does however depend on a variety of subscripts 
    that should accompany it in the bin/ folder. Should be run from
    the project root folder.

Usage:
    ${0##*/} [env] [owner] [group] [db base name] [cake core path]
    
	- Checks for an existing ./Lib/Cake folder or symlink, and if 
	  necessary prompts you for a full path to the correct core and 
	  creates the link.
	- Collects the correct environment (prod/dev/staging/etc) in use 
	  either from the command line or user prompt, and copies the 
	  correct default configs into place.
	- Collects the correct user:group either from the command line or 
	  user prompt to use for filesystem permissions.
	- Initializes git submodules.
	- Asks for DB credentials and writes them into Config/database.php 
	  for you.
	- Reads Config/writedirs.txt and makes those directories universally 
	  writeable.
	- Runs all database migrations, if the plugin is present and 
	  Config/Migrations is not empty.
	- If a SeedShell is available, asks if you want to populate sample 
	  data.


EOT

	exit 0
}
if [ "$1" = '-h' ]; then
	usage
fi


# Variable initialization.
DIR="$( cd -P "$( dirname "$0" )"/.. && pwd )"
BIN_DIR="$DIR/bin"
CONFIG_DIR="$DIR/Config"
CAKE_DIR="$DIR/Lib/Cake"
DEFAULT_DBUSER="root"
DEFAULT_DBPASS=""

#@TODO: Refactor to use Seeds plugin (check for Config/Seed/ folder).
DEFAULT_SEEDSHELL="$DIR/Plugin/Seeds/Console/Command/SeedShell.php"

# Input processing.
if [ -n "$5" ]; then
	# This path is ignored if the Lib/Cake symlink is already present.
	ARG_CAKECOREDIR=$5
elif [ ! -e "$CAKE_DIR" ]; then
	# If the symlink doesn't already exist (and it wasn't passed as an argument), prompt the user for the full path to the core to use.
	echo 'Enter the full path to the Cake .../lib/Cake folder you wish to use: '
	read ARG_CAKECOREDIR
fi
# Take a detour and make sure the project has a Cake core available now if necessary so as not to force the user to enter a bunch of other information just to have the script fail anyway.
$BIN_DIR/symlink-cake-core $ARG_CAKECOREDIR
if [ $? -gt 0 ]; then
	echo "!! Failed to link to Cake core. Aborting." >&2
	exit 1
fi

if [ -n "$4" ]; then
	ARG_DBNAME=$4
else
	echo 'Enter your local database name: '
	read ARG_DBNAME
fi

# Take another slight detour for the sake of the user's sanity and gather "every time" necessary input about the DB.
echo "Enter the database user name [${DEFAULT_DBUSER}]: "
read ARG_DBUSER
if [ -z "$ARG_DBUSER" ]; then
	ARG_DBUSER=$DEFAULT_DBUSER
fi

echo "Enter the database user password [${DEFAULT_DBPASS}]: "
read ARG_DBPASS
if [ -z "$ARG_DBPASS" ]; then
	ARG_DBPASS=$DEFAULT_DBPASS
fi

# Back to command line argument processing.
if [ -n "$3" ]; then
	ARG_GROUP=$3
else
	ARG_GROUP="$( ls -l ${DIR}/.. | grep $( basename $( pwd ) ) | awk '{ print $4 }' )"
fi

if [ -n "$2" ]; then
	ARG_OWNER=$2
else
	# Default to the owner of the project's root directory. 
	ARG_OWNER="$( ls -l ${DIR}/.. | grep $( basename $( pwd ) ) | awk '{ print $3 }' )"
fi

if [ -n "$1" ]; then
	ARG_ENV=$1
else
	# Default, simply, to dev, which is safer than prod.
	ARG_ENV="dev"
	# Or require at least the environment argument and die here, spitting out usage and exiting.
	#usage
fi




# Copy the correct config files into place.
$BIN_DIR/set-configs $ARG_ENV

# Update the database config with the proper credentials.
$BIN_DIR/db-writeconfig $ARG_DBNAME $ARG_DBUSER "$ARG_DBPASS"

# Load submodules.
$BIN_DIR/git-submodules

# Set file ownership.
$BIN_DIR/set-owner $ARG_OWNER $ARG_GROUP

# Give webserver permissions on specified files/folders.
$BIN_DIR/writedirs

# Check for Migrations (or Schema (or schema.sql)) and if present, run.
$BIN_DIR/db-loadschema

# Check for a SeedShell and if present, prompt to run it.
# @TODO: Change this to assume the SeedsShell plugin. Run a grep on the Config/Seeds/ folder for files starting with our $ARG_ENV to know if there's anything to run.
if [ -e "$DEFAULT_SEEDSHELL" ]; then
	echo "## Found a SeedShell for populating sample data in the database."
	$DIR/Console/cake Seeds.seed fill
	echo 'Would you like to seed the database with sample data? [y/n]:'
	read ANSWER
	if [ $ANSWER == 'y' ]; then
		$DIR/Console/cake Seeds.seed fill test
	fi
else
	echo "## No SeedShell is present. You will have to populate sample data in the database yourself."
fi

echo "## Project initialization complete."
