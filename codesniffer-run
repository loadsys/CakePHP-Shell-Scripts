#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}
    Convenience wrapper around code sniffing tool. If \$1 is provided, a
    summary and full reports will be generated, rather than being output
    to the standard output.

Usage:
    bin/${0##*/} [-f|h|n|x] [-r StndName]|[-r rules.xml] [dirs|files to sniff]

    f - Write full and summary report out to files.
    h - Print this help information.
    n - Suppress warnings during the sniff run.
    x - Always exit zero regardless of sniff results.

    r - Use an explicit ruleset.xml file path or coding standard name.

Environment:
    CODESNIFFER_RUN_STANDARD - If set, overrides the name of the Coding
                               Standard to use. The standard is assumed
                               to be "installed" already. The default
                               standard (and this env var) can also be
                               overriden using the -r option to
                               explicitly name a ruleset.xml file or
                               coding standard name.
                               (Default: phpcs.xml if present, otherwise
                               'Loadsys')

EOT

	exit ${1:-0}  # Exit with code 0 unless an arg is passed to the method.
}


# Set up local variables.
umask a+rw

TMP_DIR="tmp"
REPORT_DIR="${TMP_DIR}/code-sniffs"
FULL_REPORT_FILE="${REPORT_DIR}/report-full.txt"
SUMMARY_REPORT_FILE="${REPORT_DIR}/report-summary.txt"

CODE_STANDARD=${CODESNIFFER_RUN_STANDARD:-Loadsys}
if [ -r "phpcs.xml" ]; then
	CODE_STANDARD="phpcs.xml"
fi
CODE_STANDARDS=("vendor/cakephp/cakephp-codesniffer" "vendor/loadsys/loadsys_codesniffer")
SNIFF_FOLDERS=("./src" "./tests" "./config" "./webroot" "./plugins")
SNIFF_FAIL_CAUSES_SCRIPT_FAIL=0 # 0 = true. Script will exit with phpcs's return code.

SAVE_REPORTS=1  # 1 = false. DON'T save reports when no args provided.
COVERAGE="--report-full --report-summary"
SUPPRESS_WARNINGS=""


# Process command line options.
while getopts ":fhnr:x" opt; do
	case $opt in
		f)
			SAVE_REPORTS=0  # 0 = true. Save reports to files, not print to screen.
			COVERAGE="--report-full=${FULL_REPORT_FILE} --report-summary=${SUMMARY_REPORT_FILE}"
			mkdir -p "$REPORT_DIR"
			;;
		h)
			usage 0
			;;
		n)
			SUPPRESS_WARNINGS="-n"
			;;
		r)
			CODE_STANDARD="$OPTARG"
			;;
		x)
			SNIFF_FAIL_CAUSES_SCRIPT_FAIL=1 # 1 = false. Always exit 0;
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage 1
			;;
	esac
done


# Override the files/folders to sniff if any args are left.
shift $(expr $OPTIND - 1 )
if [ $# -gt 0 ]; then
	SNIFF_FOLDERS=("$@")
fi


# Make sure phpcs has the sniffs configured.
INSTALLED_ALREADY=$( bin/phpcs --config-show | grep installed_paths )
INSTALLED_ALREADY=${INSTALLED_ALREADY#installed_paths: }

for STANDARD in "${CODE_STANDARDS[@]}"; do
	if [[ ! $INSTALLED_ALREADY == *"$STANDARD"* ]]; then
		TO_INSTALL="${TO_INSTALL-},${STANDARD}"
	fi
done

TO_INSTALL=${TO_INSTALL#,}
if [ -n "$TO_INSTALL" ] && [ "$TO_INSTALL" != "$INSTALLED_ALREADY" ]; then
	echo "## Adding required coding standards installed paths."
	bin/phpcs --config-set installed_paths $TO_INSTALL > /dev/null
fi


# Run the sniffs.
echo "## Executing code sniffer:"
bin/phpcs -ps $SUPPRESS_WARNINGS \
 --extensions=php \
 --standard="$CODE_STANDARD" \
 ${COVERAGE} \
 ${SNIFF_FOLDERS[@]}

SNIFF_RESULT=$?

if [ $SAVE_REPORTS -eq 0 ]; then
	echo "## Full report created at: ${FULL_REPORT_FILE}"
	echo "## Summary report created at: ${SUMMARY_REPORT_FILE}"
fi


# Exit based on whether sniff fails should count as a "failure".
if [ $SNIFF_FAIL_CAUSES_SCRIPT_FAIL -eq 0 ]; then
	exit $SNIFF_RESULT
else
	exit 0
fi
