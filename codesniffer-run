#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}
    Convenience wrapper around code sniffing tool. If \$1 is provided, a
    summary and full reports will be generated, rather than being output
    to the standard output.

Usage:
    bin/${0##*/} [-f|h|n|x]

    f - Write full and summary report out to files.
    h - Print this help information.
    n - Suppress warnings during the sniff run.
    x - Always exit zero regardless of sniff results.

EOT

	exit ${1:-0}  # Exit with code 0 unless an arg is passed to the method.
}


# Set up local variables.
umask a+rw

DIR="$( cd -P "$( dirname "$0" )"/.. >/dev/null 2>&1 && pwd )"
TMP_DIR="${DIR}/tmp"
REPORT_DIR="${TMP_DIR}/code-sniffs"
FULL_REPORT_FILE="${REPORT_DIR}/report-full.txt"
SUMMARY_REPORT_FILE="${REPORT_DIR}/report-summary.txt"

CODE_STANDARD="vendor/cakephp/cakephp-codesniffer/CakePHP,vendor/loadsys/loadsys_codesniffer/Loadsys"
SNIFF_FOLDERS=("./src" "./plugins" "./tests" "./config" "./webroot")
SNIFF_FAIL_CAUSES_SCRIPT_FAIL=0 # 0 = true. Script will exit with phpcs's return code.

SAVE_REPORTS=1  # 1 = false. DON'T save reports when no args provided.
COVERAGE="--report-full --report-summary"
SUPPRESS_WARNINGS=""


# Process command line options.
while getopts ":fhnx" opt; do
	case $opt in
		f)
			SAVE_REPORTS=0  # 0 = true. Save reports to files, not print to screen.
			COVERAGE="--report-full=${FULL_REPORT_FILE} --report-summary=${SUMMARY_REPORT_FILE}"
			mkdir -p "$REPORT_DIR"
			;;
		h)
			usage 0
			;;
		n)
			SUPPRESS_WARNINGS="-n"
			;;
		x)
			SNIFF_FAIL_CAUSES_SCRIPT_FAIL=1 # 1 = false. Always exit 0;
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage 1
			;;
	esac
done


# Run the sniffs.
bin/phpcs -ps $SUPPRESS_WARNINGS \
 --extensions=php \
 --standard="$CODE_STANDARD" \
 ${COVERAGE} \
 ${SNIFF_FOLDERS[@]}

SNIFF_RESULT=$?

if [ $SAVE_REPORTS -eq 0 ]; then
	echo "## Full report created at: ${FULL_REPORT_FILE}"
	echo "## Summary report created at: ${SUMMARY_REPORT_FILE}"
fi


# Exit based on whether sniff fails should count as a "failure".
if [ $SNIFF_FAIL_CAUSES_SCRIPT_FAIL -eq 0 ]; then
	exit $SNIFF_RESULT
else
	exit 0
fi
