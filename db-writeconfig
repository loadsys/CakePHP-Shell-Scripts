#!/usr/bin/env bash

#---------------------------------------------------------------------
usage ()
{
	cat <<EOT

${0##*/}  
    Writes the provided values for HOST, NAME, USER, PASS and PREFIX 
    into the default Cake database.php config file. Requires at minimum 
    the database name to be supplied. The host will default to 
    'localhost', username to 'root', password to '' (blank) and the 
    prefix will default to the empty string ''. Should be run from the 
    project root folder.

Usage:
    bin/${0##*/} <DBNAME> [DBUSER] [DBPASS] [HOST] [PREFIX]


EOT

	exit 0
}
if [ "$1" = '-h' ]; then
	usage
fi


# Variable initalization.
DIR="$( cd -P "$( dirname "$0" )"/.. && pwd )"
CONFIG_DIR="$DIR/Config";
DBCONFIG_FILE="$CONFIG_DIR/database.php"
DEFAULT_DBCONFIG_FILE="${DBCONFIG_FILE}.default"

DEFAULT_HOST='localhost'
DEFAULT_PREFIX=''


# Input processing.
if [ -z "$1" ]; then
	usage
else
	ARG_DB_NAME=$1
fi

if [ -z "$2" ]; then
	ARG_DB_USER="root"
else
	ARG_DB_USER=$2
fi

if [ -z "$3" ]; then
	ARG_DB_PASS=''
else
	# This may well garble shell special chars.
	ARG_DB_PASS=$3
fi

if [ -z "$4" ]; then
	ARG_DB_HOST=$DEFAULT_HOST
else
	ARG_DB_HOST=$4
fi

if [ -z "$5" ]; then
	ARG_DB_PREFIX=$DEFAULT_PREFIX
else
	ARG_DB_PREFIX=$5
fi

DB_NAME_TEST="${ARG_DB_NAME}_test"


# Confirm we have a template file to work from.
if [ ! -e "$DEFAULT_DBCONFIG_FILE" ]; then
	echo "Default database config file file ($DEFAULT_DBCONFIG_FILE) was not found. Aborting." >&2
	exit 1
fi

echo "## Writing provided database config values to: ${DBCONFIG_FILE}";
cat $DEFAULT_DBCONFIG_FILE | m4 \
	-D warning='Generated by bin/SCRIPT on DATETIME by USER.' \
	-D SCRIPT="${0##*/}" \
	-D DATETIME="$( date '+%Y-%m-%d at %H:%M' )" \
	-D USER="$( who am i | awk '{print $1}' )" \
	-D DB_NAME="$ARG_DB_NAME" \
	-D DB_NAME_TEST="$DB_NAME_TEST" \
	-D DB_USER="$ARG_DB_USER" \
	-D DB_PASS="$ARG_DB_PASS" \
	-D DB_HOST="$ARG_DB_HOST" \
	-D DB_PREFIX="$ARG_DB_PREFIX" \
	> $DBCONFIG_FILE
