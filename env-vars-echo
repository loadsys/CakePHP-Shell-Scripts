#!/usr/bin/env php
<?php
//----------
function usage()
{
	$script = basename(__FILE__);
	echo <<<EOT

${script}
    Multi-language wrapper to load shared variabled from Config/variables.php into various scopes (bash scripts variables, yaml configs, json, xml, etc.) Don't use the [bash] option directly. Instead from your script, call `source bin/env-vars-load` which will call this script with the correct arguments.

Usage:
    bin/${script} <format> [key]
    - format: One of: [bash|json|xml|yaml]. Controls what is echo'd or returned.
    - key: A dotted path to a subtree to limit the results to. Defaults to the top level key matching getenv(APP_ENV).


EOT;

	exit(0);
}
if (isset($argv[1]) && $argv[1] == '-h') {
	usage();
}



$dir = dirname(dirname(__FILE__));
$varsFile = $dir . '/Config/variables.php';
if (!@include_once($varsFile)) {
	exit(1);
}

bash($PROJECT_VARS);



/**
 * Echo variables out in NAME=value lines, to be consumed by `bin/env-vars-load`. Flattens any sub-arrays in $keys by concatenating the parent key names on underscore. So an array like ['one' => ['two' => 'value', 'three' => 'another val']], 'four' => 'some string'] will return the following variables:
 * one_two="value"
 * one_three="another val"
 * four="some string"
 */
function bash($vars, $parent = '') {
	foreach ($vars as $k => $v) {
		//@TODO: reformat $k for bash var name compatibility?
		if (is_array($v)) {
			return bash($v, trim("{$parent}_{$k}", '_'));
		} else {
			echo "$k=\"$v\"\n";
		}
	}
	exit(0);
}





/**
 * Handles loading data from a config file, and emitting subsets of that data in various formats.
 */
class ProjectVars {
	/**
	 * Check for an environment variable to key returns against. Load data from the config file.
	 */
	public function __construct() {
	}

}



/**
 * main() ===================================================================
 *
 * Takes action when this script is used in a command-line context by processing arguments and emitting proper values. If $argv isn't present, the script assumes it is being include()d in another PHP script and returns an instance of the ProjectVars class that has been prepared for use.
 */
if (isset($argv)) {
	//emit something.
} else {
	// return an instance of the class for PHP usage.
}